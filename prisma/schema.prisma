generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id                     Int              @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String           @unique
  emailVerified          DateTime?        @db.Date
  emailVerifySignature   String?          @db.Text
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  createdWithProvider    String?
  birthDate              String
  profileImage           String?          @db.Text
  phone                  String
  password               String
  passwordResetSignature String?          @db.Text
  terms                  Boolean          @default(true)
  providers              Provider[]
  billingAddresses       BillingAddress[]
  adminUser              Boolean          @default(false)
  favorites              ShowFavorite[]
  tickesBuyed            TicketSold[]
  payments               Payment[]
  invoices               Invoice[]
  fiscalReceipts         FiscalReceipt[]
}

model Provider {
  id                Int      @id @default(autoincrement())
  name              String
  linkedWith        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  providerAccountId String   @unique @db.VarChar(255)
  providerEmail     String
  providerFirstName String
  providerLastName  String
  client            Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          Int
}

model BillingAddress {
  id           Int     @id @default(autoincrement())
  country      String
  city         String
  address      String
  zipCode      String
  observations String? @db.VarChar(255)
  client       Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     Int
}

model ExchangeRate {
  id         Int      @id @default(autoincrement())
  currency   String
  value      Float
  multiplier Int
  date       DateTime
  createdAt  DateTime @default(now())
}

model Show {
  id             Int                          @id @default(autoincrement())
  image          String
  title          String
  title_en       String
  startTime      String
  endTime        String
  director       String
  actors         String                       @db.VarChar(255)
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  description_en String                       @db.VarChar(150)
  description    String                       @db.VarChar(150)
  content        String                       @db.VarChar(500)
  content_en     String                       @db.VarChar(500)
  seasonId       Int
  season         Season                       @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  showTypeId     Int
  showType       ShowType                     @relation(fields: [showTypeId], references: [id], onDelete: Cascade)
  showRoomId     Int
  showRoom       ShowRoom                     @relation(fields: [showRoomId], references: [id], onDelete: Cascade)
  favorites      ShowFavorite[]
  ticketsSold    TicketSold[]
  materials      ShowMaterialDecorationUsed[]
  fiscalReceipts FiscalReceipt[]
}

model ShowFavorite {
  id       Int    @id @default(autoincrement())
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  show     Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId   Int
  clientId Int
}

model ShowType {
  id        Int      @id @default(autoincrement())
  name      String
  name_en   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shows     Show[]
}

model Season {
  id        Int      @id @default(autoincrement())
  name      String
  name_en   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shows     Show[]
}

model ShowRoom {
  id           Int            @id @default(autoincrement())
  number       String
  observations String?        @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  seats        ShowRoomSeat[]
  ticketsSold  TicketSold[]
  shows        Show[]
}

model ShowRoomSeat {
  id          Int          @id @default(autoincrement())
  showRoomId  Int
  showRoom    ShowRoom     @relation(fields: [showRoomId], references: [id], onDelete: Cascade)
  type        String
  price       Float
  row         String
  number      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ticketsSold TicketSold[]
}

model TicketSold {
  id             Int             @id @default(autoincrement())
  number         String
  show           Show            @relation(fields: [showId], references: [id], onDelete: Cascade)
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       Int
  showRoom       ShowRoom        @relation(fields: [showRoomId], references: [id], onDelete: Cascade)
  showRoomId     Int
  seat           ShowRoomSeat    @relation(fields: [seatId], references: [id], onDelete: Cascade)
  seatId         Int
  soldPrice      Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  showId         Int
  ticketVerified TicketVerified?
  payment        Payment?
  invoice        Invoice?
  fiscalReceipt  FiscalReceipt?
}

model TicketVerified {
  id           Int        @id @default(autoincrement())
  ticketSold   TicketSold @relation(fields: [ticketSoldId], references: [id], onDelete: Cascade)
  ticketSoldId Int        @unique
  verifiedAt   DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
}

model Payment {
  id             Int            @id @default(autoincrement())
  amount         Float
  currency       String
  currencyAmount Float
  currencyDate   DateTime
  status         PaymentStatus  @default(ACCEPTED)
  paidAt         DateTime       @default(now())
  type           PaymentType    @default(DEBIT_CARD)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  client         Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       Int
  ticket         TicketSold?    @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  ticketId       Int?           @unique
  invoice        Invoice?
  fiscalReceipt  FiscalReceipt?
}

enum PaymentStatus {
  ACCEPTED
  REJECTED
}

enum PaymentType {
  CASH
  DEBIT_CARD
}

model FiscalReceipt {
  id             Int         @id @default(autoincrement())
  receiptNumber  String
  receiptSeries  String      @default("ENIGMA")
  amount         Float
  currency       String
  currencyAmount Float
  currencyDate   DateTime
  paidAt         DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  showId         Int
  show           Show        @relation(fields: [showId], references: [id], onDelete: Cascade)
  paymentId      Int         @unique
  payment        Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  ticket         TicketSold? @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  ticketId       Int?        @unique
  clientId       Int
  client         Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoice        Invoice?
}

model Invoice {
  id              Int           @id @default(autoincrement())
  billingAddress  String
  firstName       String
  lastName        String
  phone           String
  email           String
  invoiceSeries   String        @default("ENIGMA")
  invoiceNumber   String
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  totalAmount     Float
  extraFees       Float
  amount          Int
  currency        String
  currencyAmount  Float
  currencyDate    DateTime
  status          String        @default("paid")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ticket          TicketSold?   @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  payment         Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  ticketId        Int?          @unique
  paymentId       Int           @unique
  clientId        Int
  fiscalReceipt   FiscalReceipt @relation(fields: [fiscalReceiptId], references: [id], onDelete: Cascade)
  fiscalReceiptId Int           @unique
}

model ShowMaterialDecoration {
  id            Int                            @id @default(autoincrement())
  name          String
  name_en       String
  stock         Int
  unit          String
  buyDate       String
  buyPrice      Float
  producer      String
  categoryId    Int
  category      ShowMaterialDecorationCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  createdAt     DateTime                       @default(now())
  updatedAt     DateTime                       @updatedAt
  materialsUsed ShowMaterialDecorationUsed[]
}

model ShowMaterialDecorationCategory {
  id                  Int                      @id @default(autoincrement())
  name                String
  name_en             String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  materialDecorations ShowMaterialDecoration[]
}

model ShowMaterialDecorationUsed {
  id           Int                    @id @default(autoincrement())
  materialId   Int
  material     ShowMaterialDecoration @relation(fields: [materialId], references: [id], onDelete: Cascade)
  show         Show                   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId       Int
  usedDate     String
  quantity     Int
  leftQuantity Int
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  observations String?                @db.VarChar(255)
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  codClient               Int               @id @default(autoincrement())
  numeClient              String
  email                   String            @unique
  emailVerificat          DateTime?         @db.Date
  emailVerificatSemnatura String?           @db.Text
  creatPe                 DateTime          @default(now())
  actualizatPe            DateTime          @updatedAt
  creatCuProvider         String?
  dataNasterii            String
  telefon                 String
  parola                  String
  parolaResetareSemnatura String?           @db.Text
  termeni                 Boolean           @default(true)
  utlizatorAdmin          Boolean           @default(false)
  providerii              Provider[]
  adreseFacturare         AdresaFacturare[]
  bileteCumparate         BiletSpectacol[]
  platiiEfectuate         Plata[]
  bonuriFiscale           BonFiscal[]
  facturiiEmise           FacturaFiscala[]
}

model Provider {
  codProvider      Int      @id @default(autoincrement())
  numeProvider     String
  asociatCu        String
  creatPe          DateTime @default(now())
  actualizatPe     DateTime @updatedAt
  providerContCod  String   @unique @db.VarChar(255)
  providerEmail    String
  providerContNume String
  client           Client   @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient        Int
}

model AdresaFacturare {
  codAdresa  Int     @id @default(autoincrement())
  tara       String
  oras       String
  adresa     String  @db.VarChar(255)
  codPostal  String
  observatii String? @db.VarChar(255)
  client     Client  @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient  Int
}

model Spectacol {
  codSpectacol     Int              @id @default(autoincrement())
  imagine          String
  titlu            String
  oraIncepere      String
  oraTerminare     String
  director         String
  actorii          String           @db.VarChar(255)
  creatPe          DateTime         @default(now())
  actualizatPe     DateTime         @updatedAt
  descriereScurta  String           @db.VarChar(150)
  continut         String           @db.VarChar(600)
  sezon            Sezon            @relation(fields: [codSezon], references: [codSezon], onDelete: Cascade)
  codSezon         Int
  tipSpectacol     TipSpectacol     @relation(fields: [codTipSpectacol], references: [codTipSpectacol], onDelete: Cascade)
  codTipSpectacol  Int
  salaSpectacol    SalaSpectacol    @relation(fields: [codSalaSpectacol], references: [codSalaSpectacol], onDelete: Cascade)
  codSalaSpectacol Int
  bileteVandute    BiletSpectacol[]
  bonuriFiscale    BonFiscal[]
}

model TipSpectacol {
  codTipSpectacol Int         @id @default(autoincrement())
  numeTip         String
  creatPe         DateTime    @default(now())
  actualizatPe    DateTime    @updatedAt
  spectacole      Spectacol[]
}

model Sezon {
  codSezon     Int         @id @default(autoincrement())
  numeSezon    String
  creatPe      DateTime    @default(now())
  actualizatPe DateTime    @updatedAt
  spectacole   Spectacol[]
}

model SalaSpectacol {
  codSalaSpectacol Int                @id @default(autoincrement())
  numarSala        String
  observatii       String?            @db.VarChar(255)
  creatPe          DateTime           @default(now())
  actualizatPe     DateTime           @updatedAt
  locuriSala       LocSalaSpectacol[]
  bileteVandute    BiletSpectacol[]
  spectacole       Spectacol[]
}

model LocSalaSpectacol {
  codLocSala       Int              @id @default(autoincrement())
  tipLoc           String
  pretLoc          Float
  rand             String
  numarLoc         String
  salaSpectacol    SalaSpectacol    @relation(fields: [codSalaSpectacol], references: [codSalaSpectacol], onDelete: Cascade)
  codSalaSpectacol Int
  creatPe          DateTime         @default(now())
  actualizatPe     DateTime         @updatedAt
  bileteVandute    BiletSpectacol[]
}

model BiletSpectacol {
  codBiletSpectacol   Int              @id @default(autoincrement())
  pretVanzare         Float
  numarBilet          String
  biletVerificat      Boolean
  spectacol           Spectacol        @relation(fields: [codSpectacol], references: [codSpectacol], onDelete: Cascade)
  codSpectacol        Int
  client              Client           @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient           Int
  salaSpectacol       SalaSpectacol    @relation(fields: [codSalaSpectacol], references: [codSalaSpectacol], onDelete: Cascade)
  codSalaSpectacol    Int
  locSalaSpectacol    LocSalaSpectacol @relation(fields: [codLocSalaSpectacol], references: [codLocSala], onDelete: Cascade)
  codLocSalaSpectacol Int
  plata               Plata            @relation(fields: [codPlata], references: [codPlata], onDelete: Cascade)
  codPlata            Int
  creatPe             DateTime         @default(now())
  actualizatPe        DateTime         @updatedAt
  bonFiscal           BonFiscal?       @relation(fields: [codBonFiscal], references: [codBonFiscal], onDelete: SetNull)
  factura             FacturaFiscala?  @relation(fields: [codFacturaFiscala], references: [codFactura], onDelete: SetNull)
  codBonFiscal        Int?
  codFacturaFiscala   Int?
}

model Plata {
  codPlata       Int              @id @default(autoincrement())
  sumaPlatita    Float
  platitPe       DateTime         @default(now())
  tipPlata       TipPlata         @default(CARD_CREDIT)
  starePlata     StarePlata       @default(ACCEPTATA)
  creatPe        DateTime         @default(now())
  actualizatPe   DateTime         @updatedAt
  client         Client           @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient      Int
  bileteAsociate BiletSpectacol[]
  bonFiscal      BonFiscal?
  factura        FacturaFiscala?
}

enum StarePlata {
  RESPINSA
  ACCEPTATA
}

enum TipPlata {
  CASH
  CARD_CREDIT
}

model BonFiscal {
  codBonFiscal    Int              @id @default(autoincrement())
  numarBonFiscal  String
  serieBonFiscal  String           @default("ENIGMA")
  creatPe         DateTime         @default(now())
  actualizatPe    DateTime         @updatedAt
  spectacol       Spectacol        @relation(fields: [codSpectacol], references: [codSpectacol], onDelete: Cascade)
  codSpectacol    Int
  plata           Plata            @relation(fields: [codPlata], references: [codPlata], onDelete: Cascade)
  codPlata        Int              @unique
  client          Client           @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient       Int
  factura         FacturaFiscala?
  bileteSpectacol BiletSpectacol[]
}

model FacturaFiscala {
  codFactura       Int              @id @default(autoincrement())
  serieFactura     String           @default("ENIGMA")
  numarFactura     String
  dataIntocmiri    DateTime         @default(now())
  dataScadentei    DateTime
  sumaPlatita      Float
  costuriExtra     Float
  totalSumaPlatita Float
  creatPe          DateTime         @default(now())
  actualizatPe     DateTime         @updatedAt
  adresaFacturare  String
  numeClient       String
  telefon          String
  email            String
  client           Client           @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient        Int
  plata            Plata            @relation(fields: [codPlata], references: [codPlata], onDelete: Cascade)
  codPlata         Int              @unique
  bonFiscal        BonFiscal        @relation(fields: [codBonFiscal], references: [codBonFiscal], onDelete: Cascade)
  codBonFiscal     Int              @unique
  bileteSpectacol  BiletSpectacol[]
}

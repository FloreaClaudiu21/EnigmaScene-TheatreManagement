generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  codClient               Int                 @id @default(autoincrement())
  numeClient              String
  email                   String              @unique
  emailVerificat          DateTime?           @db.Date
  emailVerificatSemnatura String?             @db.Text
  creatPe                 DateTime            @default(now())
  actualizatPe            DateTime            @updatedAt
  creatCuProvider         String?
  dataNasterii            String
  telefon                 String
  parola                  String
  parolaResetareSemnatura String?             @db.Text
  termeni                 Boolean             @default(true)
  utlizatorAdmin          Boolean             @default(false)
  providerii              Provider[]
  adreseFacturare         AdresaFacturare[]
  platiiEfectuate         Plata[]
  rezervari               Rezervare[]
  facturii                Factura[]
  apartamenteFavorite     FavoritApartament[]
}

model Provider {
  codProvider      Int      @id @default(autoincrement())
  numeProvider     String
  asociatCu        String
  creatPe          DateTime @default(now())
  actualizatPe     DateTime @updatedAt
  providerContCod  String   @unique @db.VarChar(255)
  providerEmail    String
  providerContNume String
  client           Client   @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient        Int
}

model AdresaFacturare {
  codAdresa  Int     @id @default(autoincrement())
  tara       String
  oras       String
  adresa     String  @db.VarChar(255)
  codPostal  String
  observatii String? @db.VarChar(255)
  client     Client  @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  codClient  Int
}

model PozaApartament {
  codPoza       Int        @id @default(autoincrement())
  url           String
  apartament    Apartament @relation(fields: [codApartament], references: [codApartament], onDelete: Cascade)
  codApartament Int
}

model Apartament {
  codApartament    Int                 @id @default(autoincrement())
  titlu            String
  descriereScurta  String              @db.VarChar(200)
  continut         String              @db.VarChar(1000)
  suprafata        Float
  numarCamere      Int
  numarBai         Int
  etaj             Int
  adresa           String
  oras             String
  pret             Float
  tipApartament    TipApartament       @relation(fields: [codTipApartament], references: [codTipApartament], onDelete: Cascade)
  codTipApartament Int
  creatPe          DateTime            @default(now())
  actualizatPe     DateTime            @updatedAt
  rezervari        Rezervare[]
  contracte        Contract[]
  poze             PozaApartament[]
  plati            Plata[]
  facturi          Factura[]
  favorite         FavoritApartament[]
}

model TipApartament {
  codTipApartament Int          @id @default(autoincrement())
  denumireTip      String
  apartamente      Apartament[]
}

model FavoritApartament {
  codFavoritApartament Int        @id @default(autoincrement())
  apartament           Apartament @relation(fields: [codApartament], references: [codApartament])
  codApartament        Int
  client               Client     @relation(fields: [codClient], references: [codClient])
  codClient            Int
}

model Rezervare {
  codRezervare          Int        @id @default(autoincrement())
  nrRezervare           String
  dataIncepereRezervare DateTime
  dataSfarsitRezervare  DateTime
  apartament            Apartament @relation(fields: [codApartament], references: [codApartament], onDelete: Cascade)
  codApartament         Int
  client                Client     @relation(fields: [codClient], references: [codClient])
  codClient             Int
  plati                 Plata[]
}

model Contract {
  codContract   Int        @id @default(autoincrement())
  nrContract    String
  serieContract String
  dataIncepere  DateTime
  dataTerminare DateTime
  apartament    Apartament @relation(fields: [codApartament], references: [codApartament], onDelete: Cascade)
  codApartament Int
}

model Plata {
  codPlata      Int        @id @default(autoincrement())
  dataPlatii    DateTime
  suma          Float
  metodaPlatii  String
  monedaPlata   String
  statusPlata   String
  rezervare     Rezervare  @relation(fields: [codRezervare], references: [codRezervare], onDelete: Cascade)
  codRezervare  Int
  codClient     Int
  client        Client     @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  apartament    Apartament @relation(fields: [codApartament], references: [codApartament], onDelete: Cascade)
  codApartament Int
  factura       Factura    @relation(fields: [codFactura], references: [codFactura], onDelete: Cascade)
  codFactura    Int
}

model Factura {
  codFactura    Int        @id @default(autoincrement())
  nrFactura     String
  serieFactura  String
  dataEmiterii  DateTime
  monedaPlata   String
  sumaTotala    Float
  numeClient    String
  prenumeClient String
  adresa        String
  email         String
  codClient     Int
  client        Client     @relation(fields: [codClient], references: [codClient], onDelete: Cascade)
  apartament    Apartament @relation(fields: [codApartament], references: [codApartament], onDelete: Cascade)
  codApartament Int
  plati         Plata[]
}
